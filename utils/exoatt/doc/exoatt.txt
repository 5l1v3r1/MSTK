/* 
Copyright 2019 Triad National Security, LLC. All rights reserved.

This file is part of the MSTK project. Please see the license file at
the root of this repository or at
https://github.com/MeshToolkit/MSTK/blob/master/LICENSE
*/

exoatt is a utility to read in a _SERIAL_ Exodus II mesh and augment it
with (1) real valued attributes read from an auxiliary file and/or (2)
entity sets read from an auxiliary file. A new Exodus II mesh file
(partitioned if requested) is written out containing the attributes
and the entity sets (element sets, sidesets, nodesets)

Run 'exoatt' as follows:

usage: mpirun -n Nproc exoatt <--partition=y|1|n|0>
<--partition-method=0|1|2> <--parallel-check=y|1|n|0>
<--attfile=attfilename> <--setfile=setfilename> inputfilename outputfilename

partition-method = 0, METIS
                 = 1, ZOLTAN with GRAPH partioning
                 = 2, ZOLTAN with RCB partitioning
Choose 2 if you want to avoid partitioning models
with high aspect ratio along the short directions

attfilename  = optional auxiliary file with real valued attributes
setfilename = optional auxiliary file with entity set definitions
infilename   = Input **SERIAL** Exodus II File
outfilename  = Output Exodus II file name

To write out partitioned files, run the command prefixed with 'mpirun
-n Nproc' or 'aprun -n Nproc' where Nproc is the number of
processors the executable is running on and the desired number of partitions
of the output mesh


FORMAT of attfilename
++++++++++++++++++++++++++

attfilename can be anything, there is no requirement that it be
something.att or something.txt etc. The format is as follows:

---------------------------------------------------
number_of_attributes
attname1   entitytype   num_specified 
attrib_data_line_1
attrib_data_line_2
.
.
.
attname2   entitytype   num_specified
.
.
.
-----------------------------------------------------

attname is the attribute name

entitytype is keyword NODE, CELL

num_specified is the number of entities for which values are
specified. If it is -1, it means all entities of type entitytype in
the mesh.


The way an attribute data line is specified is different depending on
whether the values are specified on the whole mesh (num_specified =
-1) or on a subset (num_specified > 0). 

If values are specified on the whole mesh, then the attribute values
can be listed as is without any element IDs. There must be as many
values as there are entities of that type in the mesh.

If values are specified on a set of entities, then each attribute data
line must contain an entity ID followed by the value to assigned to
it.


NO COMMENT LINES ARE ALLOWED. 


Example file for a mesh of 5 cells and 12 node
----------------------------------
3
cell_density  ceLL  -1
2.0 3.0 
1.0 
1.55 2.35
cell_color CELL 3
1 2 2
node_color nodE -1
3.5 4.5 100.5 2.5 
6.0 2.0
1.0 5.0 5.5 3.5 -2.0
--------------------------------- 


FORMAT of setfilename
++++++++++++++++++++++++++

setfilename can be anything, there is no requirement that it be
something.els or something.txt etc. The format is as follows:

---------------------------------------------------
Number of entity sets
setID1 set_entity_type num_specified
entity_line_1
entity_line_2
.
.
.
setID2 set_entity_type num_specified
entity_line_1
entity_line_2
.
.
---------------------------------------------------

setIDn can be any unsigned integer 
set_entity_type must be CELL, FACE or NODE

num_specified is the number of entities in the set and must be greater
than 0.

The entity_line for CELLS or NODES is merely the ID of the entity in
the mesh.

The entity_line for FACES contains a description of the face (edge in
2D) in terms of its vertices. In 3D, the line starts with the number
of vertices in the face followed by the IDs of the face vertices - The
vertices don't have to be in any particular order but debugging any
problems is likely simpler if they are in cw or ccw order. In 2D,
"FACES" are really edges; so the entity_line is just vertex_0 and
vertex_1 of the edge - there is no need to start the line with the
number of vertices (known to be 2). NOTE: The only situation this
cannot handle is if there are two faces sharing all the same verttices
and the face set needs to include a particular one of those
faces. This is a highly unlikely situation (crack/fault defined by
exactly one face?).



NO COMMENT LINES ARE ALLOWED
