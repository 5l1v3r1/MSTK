#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 1
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\rightmargin 1cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Building parallel information from distributed meshes
\end_layout

\begin_layout Abstract
This documents shows how to build parallel information from distributed
 submeshes.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename figures/PMSTK.png
	scale 80

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
The overall flow chart
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section*
Assign global IDs
\end_layout

\begin_layout Standard
Here we are given submeshes on each processor, MESH_AssignGlobalID() assigns
 each entity a unique global ID.
 For an entity shared by 2 or more processors, we assign its ownership to
 the processor with lowest rank.
 It uses partition boundary vertex coordinate values to detect ghost vertex.
\end_layout

\begin_layout Standard
Besides assigning global IDs, it also sets master partition id and ptype
 for all entities.
\end_layout

\begin_layout Subsection*
All to all comunication
\end_layout

\begin_layout Standard
If the distributed submesh has no additional information, i.e.
 each submesh does not know its neighbors, MESH_AssignGlobalIDs() should
 be called.
 It has 4 subroutines, assign global ID for vertex, edge, face and region
 respectively.
 It uses Allgather() communication routine in MPI.
\end_layout

\begin_layout Standard
After this function, call MESH_BuildConnection() to build parallel information.
\end_layout

\begin_layout Subsection*
Point to point comunication
\end_layout

\begin_layout Standard
If the parallel information is given, i.e.
 each submesh knows its neighbors, MESH_AssignGlobalIDs_point() should be
 called.
 It has 4 subroutines, assign global ID for vertex, edge, face and region
 respectively.
 It uses Send() communication routine in MPI.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Section*
Label PType
\end_layout

\begin_layout Standard
MESH_LabelPType() labels 1-ring boundary elements.
 It assigns all the elements with a POVERLAP or PGHOST vertex as POVERLAP,
 the corresponding ghost entities remain to be PGHOST, otherwise become
 POVERLAP.
\end_layout

\begin_layout Section*
Parallel Add Ghost
\end_layout

\begin_layout Standard
MESH_Parallel_AddGhost() adds 1-ring ghost elements through inter processor
 point to point communications.
 First it builds a mesh of 1-ring overlap layer through MESH_BuildSubMesh()
 on each submesh then uses MESH_SendMesh() to send it to neighbor processors,
 MESH_RecvMesh() is used to receive layers from neighbor processors, add
 these layers onto each submesh through MESH_ConcatSubMesh() 
\end_layout

\begin_layout Section*
Parallel Checking
\end_layout

\begin_layout Standard
MESH_Parallel_Check() checks if the parallel mesh is valid.
 First it checks if every ghost entity has a master partition number that
 is different from current partition, and if other PType entitties has the
 same master partition number as this parition.
 Second, it sends ghost entities to their host processor and check if it
 exists and if the information matches.
\end_layout

\end_body
\end_document
